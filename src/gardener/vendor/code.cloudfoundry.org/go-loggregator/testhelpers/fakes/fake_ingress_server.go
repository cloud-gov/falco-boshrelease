// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"sync"

	"code.cloudfoundry.org/go-loggregator/rpc/loggregator_v2"
)

type FakeIngressServer struct {
	SenderStub        func(loggregator_v2.Ingress_SenderServer) error
	senderMutex       sync.RWMutex
	senderArgsForCall []struct {
		arg1 loggregator_v2.Ingress_SenderServer
	}
	senderReturns struct {
		result1 error
	}
	senderReturnsOnCall map[int]struct {
		result1 error
	}
	BatchSenderStub        func(loggregator_v2.Ingress_BatchSenderServer) error
	batchSenderMutex       sync.RWMutex
	batchSenderArgsForCall []struct {
		arg1 loggregator_v2.Ingress_BatchSenderServer
	}
	batchSenderReturns struct {
		result1 error
	}
	batchSenderReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeIngressServer) Sender(arg1 loggregator_v2.Ingress_SenderServer) error {
	fake.senderMutex.Lock()
	ret, specificReturn := fake.senderReturnsOnCall[len(fake.senderArgsForCall)]
	fake.senderArgsForCall = append(fake.senderArgsForCall, struct {
		arg1 loggregator_v2.Ingress_SenderServer
	}{arg1})
	fake.recordInvocation("Sender", []interface{}{arg1})
	fake.senderMutex.Unlock()
	if fake.SenderStub != nil {
		return fake.SenderStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.senderReturns.result1
}

func (fake *FakeIngressServer) SenderCallCount() int {
	fake.senderMutex.RLock()
	defer fake.senderMutex.RUnlock()
	return len(fake.senderArgsForCall)
}

func (fake *FakeIngressServer) SenderArgsForCall(i int) loggregator_v2.Ingress_SenderServer {
	fake.senderMutex.RLock()
	defer fake.senderMutex.RUnlock()
	return fake.senderArgsForCall[i].arg1
}

func (fake *FakeIngressServer) SenderReturns(result1 error) {
	fake.SenderStub = nil
	fake.senderReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeIngressServer) SenderReturnsOnCall(i int, result1 error) {
	fake.SenderStub = nil
	if fake.senderReturnsOnCall == nil {
		fake.senderReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.senderReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeIngressServer) BatchSender(arg1 loggregator_v2.Ingress_BatchSenderServer) error {
	fake.batchSenderMutex.Lock()
	ret, specificReturn := fake.batchSenderReturnsOnCall[len(fake.batchSenderArgsForCall)]
	fake.batchSenderArgsForCall = append(fake.batchSenderArgsForCall, struct {
		arg1 loggregator_v2.Ingress_BatchSenderServer
	}{arg1})
	fake.recordInvocation("BatchSender", []interface{}{arg1})
	fake.batchSenderMutex.Unlock()
	if fake.BatchSenderStub != nil {
		return fake.BatchSenderStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.batchSenderReturns.result1
}

func (fake *FakeIngressServer) BatchSenderCallCount() int {
	fake.batchSenderMutex.RLock()
	defer fake.batchSenderMutex.RUnlock()
	return len(fake.batchSenderArgsForCall)
}

func (fake *FakeIngressServer) BatchSenderArgsForCall(i int) loggregator_v2.Ingress_BatchSenderServer {
	fake.batchSenderMutex.RLock()
	defer fake.batchSenderMutex.RUnlock()
	return fake.batchSenderArgsForCall[i].arg1
}

func (fake *FakeIngressServer) BatchSenderReturns(result1 error) {
	fake.BatchSenderStub = nil
	fake.batchSenderReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeIngressServer) BatchSenderReturnsOnCall(i int, result1 error) {
	fake.BatchSenderStub = nil
	if fake.batchSenderReturnsOnCall == nil {
		fake.batchSenderReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.batchSenderReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeIngressServer) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.senderMutex.RLock()
	defer fake.senderMutex.RUnlock()
	fake.batchSenderMutex.RLock()
	defer fake.batchSenderMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeIngressServer) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ loggregator_v2.IngressServer = new(FakeIngressServer)
