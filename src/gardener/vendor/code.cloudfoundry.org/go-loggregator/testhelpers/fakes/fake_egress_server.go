// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"sync"

	"code.cloudfoundry.org/go-loggregator/rpc/loggregator_v2"
)

type FakeEgressServer struct {
	ReceiverStub        func(*loggregator_v2.EgressRequest, loggregator_v2.Egress_ReceiverServer) error
	receiverMutex       sync.RWMutex
	receiverArgsForCall []struct {
		arg1 *loggregator_v2.EgressRequest
		arg2 loggregator_v2.Egress_ReceiverServer
	}
	receiverReturns struct {
		result1 error
	}
	receiverReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeEgressServer) Receiver(arg1 *loggregator_v2.EgressRequest, arg2 loggregator_v2.Egress_ReceiverServer) error {
	fake.receiverMutex.Lock()
	ret, specificReturn := fake.receiverReturnsOnCall[len(fake.receiverArgsForCall)]
	fake.receiverArgsForCall = append(fake.receiverArgsForCall, struct {
		arg1 *loggregator_v2.EgressRequest
		arg2 loggregator_v2.Egress_ReceiverServer
	}{arg1, arg2})
	fake.recordInvocation("Receiver", []interface{}{arg1, arg2})
	fake.receiverMutex.Unlock()
	if fake.ReceiverStub != nil {
		return fake.ReceiverStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.receiverReturns.result1
}

func (fake *FakeEgressServer) ReceiverCallCount() int {
	fake.receiverMutex.RLock()
	defer fake.receiverMutex.RUnlock()
	return len(fake.receiverArgsForCall)
}

func (fake *FakeEgressServer) ReceiverArgsForCall(i int) (*loggregator_v2.EgressRequest, loggregator_v2.Egress_ReceiverServer) {
	fake.receiverMutex.RLock()
	defer fake.receiverMutex.RUnlock()
	return fake.receiverArgsForCall[i].arg1, fake.receiverArgsForCall[i].arg2
}

func (fake *FakeEgressServer) ReceiverReturns(result1 error) {
	fake.ReceiverStub = nil
	fake.receiverReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeEgressServer) ReceiverReturnsOnCall(i int, result1 error) {
	fake.ReceiverStub = nil
	if fake.receiverReturnsOnCall == nil {
		fake.receiverReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.receiverReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeEgressServer) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.receiverMutex.RLock()
	defer fake.receiverMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeEgressServer) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ loggregator_v2.EgressServer = new(FakeEgressServer)
