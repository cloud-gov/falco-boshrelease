// Code generated by counterfeiter. DO NOT EDIT.
package serviceclientfakes

import (
	"sync"

	"code.cloudfoundry.org/bbs/models"
	"code.cloudfoundry.org/bbs/serviceclient"
	"code.cloudfoundry.org/lager"
)

type FakeServiceClient struct {
	CellByIdStub        func(logger lager.Logger, cellId string) (*models.CellPresence, error)
	cellByIdMutex       sync.RWMutex
	cellByIdArgsForCall []struct {
		logger lager.Logger
		cellId string
	}
	cellByIdReturns struct {
		result1 *models.CellPresence
		result2 error
	}
	cellByIdReturnsOnCall map[int]struct {
		result1 *models.CellPresence
		result2 error
	}
	CellsStub        func(logger lager.Logger) (models.CellSet, error)
	cellsMutex       sync.RWMutex
	cellsArgsForCall []struct {
		logger lager.Logger
	}
	cellsReturns struct {
		result1 models.CellSet
		result2 error
	}
	cellsReturnsOnCall map[int]struct {
		result1 models.CellSet
		result2 error
	}
	CellEventsStub        func(logger lager.Logger) <-chan models.CellEvent
	cellEventsMutex       sync.RWMutex
	cellEventsArgsForCall []struct {
		logger lager.Logger
	}
	cellEventsReturns struct {
		result1 <-chan models.CellEvent
	}
	cellEventsReturnsOnCall map[int]struct {
		result1 <-chan models.CellEvent
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeServiceClient) CellById(logger lager.Logger, cellId string) (*models.CellPresence, error) {
	fake.cellByIdMutex.Lock()
	ret, specificReturn := fake.cellByIdReturnsOnCall[len(fake.cellByIdArgsForCall)]
	fake.cellByIdArgsForCall = append(fake.cellByIdArgsForCall, struct {
		logger lager.Logger
		cellId string
	}{logger, cellId})
	fake.recordInvocation("CellById", []interface{}{logger, cellId})
	fake.cellByIdMutex.Unlock()
	if fake.CellByIdStub != nil {
		return fake.CellByIdStub(logger, cellId)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.cellByIdReturns.result1, fake.cellByIdReturns.result2
}

func (fake *FakeServiceClient) CellByIdCallCount() int {
	fake.cellByIdMutex.RLock()
	defer fake.cellByIdMutex.RUnlock()
	return len(fake.cellByIdArgsForCall)
}

func (fake *FakeServiceClient) CellByIdArgsForCall(i int) (lager.Logger, string) {
	fake.cellByIdMutex.RLock()
	defer fake.cellByIdMutex.RUnlock()
	return fake.cellByIdArgsForCall[i].logger, fake.cellByIdArgsForCall[i].cellId
}

func (fake *FakeServiceClient) CellByIdReturns(result1 *models.CellPresence, result2 error) {
	fake.CellByIdStub = nil
	fake.cellByIdReturns = struct {
		result1 *models.CellPresence
		result2 error
	}{result1, result2}
}

func (fake *FakeServiceClient) CellByIdReturnsOnCall(i int, result1 *models.CellPresence, result2 error) {
	fake.CellByIdStub = nil
	if fake.cellByIdReturnsOnCall == nil {
		fake.cellByIdReturnsOnCall = make(map[int]struct {
			result1 *models.CellPresence
			result2 error
		})
	}
	fake.cellByIdReturnsOnCall[i] = struct {
		result1 *models.CellPresence
		result2 error
	}{result1, result2}
}

func (fake *FakeServiceClient) Cells(logger lager.Logger) (models.CellSet, error) {
	fake.cellsMutex.Lock()
	ret, specificReturn := fake.cellsReturnsOnCall[len(fake.cellsArgsForCall)]
	fake.cellsArgsForCall = append(fake.cellsArgsForCall, struct {
		logger lager.Logger
	}{logger})
	fake.recordInvocation("Cells", []interface{}{logger})
	fake.cellsMutex.Unlock()
	if fake.CellsStub != nil {
		return fake.CellsStub(logger)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.cellsReturns.result1, fake.cellsReturns.result2
}

func (fake *FakeServiceClient) CellsCallCount() int {
	fake.cellsMutex.RLock()
	defer fake.cellsMutex.RUnlock()
	return len(fake.cellsArgsForCall)
}

func (fake *FakeServiceClient) CellsArgsForCall(i int) lager.Logger {
	fake.cellsMutex.RLock()
	defer fake.cellsMutex.RUnlock()
	return fake.cellsArgsForCall[i].logger
}

func (fake *FakeServiceClient) CellsReturns(result1 models.CellSet, result2 error) {
	fake.CellsStub = nil
	fake.cellsReturns = struct {
		result1 models.CellSet
		result2 error
	}{result1, result2}
}

func (fake *FakeServiceClient) CellsReturnsOnCall(i int, result1 models.CellSet, result2 error) {
	fake.CellsStub = nil
	if fake.cellsReturnsOnCall == nil {
		fake.cellsReturnsOnCall = make(map[int]struct {
			result1 models.CellSet
			result2 error
		})
	}
	fake.cellsReturnsOnCall[i] = struct {
		result1 models.CellSet
		result2 error
	}{result1, result2}
}

func (fake *FakeServiceClient) CellEvents(logger lager.Logger) <-chan models.CellEvent {
	fake.cellEventsMutex.Lock()
	ret, specificReturn := fake.cellEventsReturnsOnCall[len(fake.cellEventsArgsForCall)]
	fake.cellEventsArgsForCall = append(fake.cellEventsArgsForCall, struct {
		logger lager.Logger
	}{logger})
	fake.recordInvocation("CellEvents", []interface{}{logger})
	fake.cellEventsMutex.Unlock()
	if fake.CellEventsStub != nil {
		return fake.CellEventsStub(logger)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.cellEventsReturns.result1
}

func (fake *FakeServiceClient) CellEventsCallCount() int {
	fake.cellEventsMutex.RLock()
	defer fake.cellEventsMutex.RUnlock()
	return len(fake.cellEventsArgsForCall)
}

func (fake *FakeServiceClient) CellEventsArgsForCall(i int) lager.Logger {
	fake.cellEventsMutex.RLock()
	defer fake.cellEventsMutex.RUnlock()
	return fake.cellEventsArgsForCall[i].logger
}

func (fake *FakeServiceClient) CellEventsReturns(result1 <-chan models.CellEvent) {
	fake.CellEventsStub = nil
	fake.cellEventsReturns = struct {
		result1 <-chan models.CellEvent
	}{result1}
}

func (fake *FakeServiceClient) CellEventsReturnsOnCall(i int, result1 <-chan models.CellEvent) {
	fake.CellEventsStub = nil
	if fake.cellEventsReturnsOnCall == nil {
		fake.cellEventsReturnsOnCall = make(map[int]struct {
			result1 <-chan models.CellEvent
		})
	}
	fake.cellEventsReturnsOnCall[i] = struct {
		result1 <-chan models.CellEvent
	}{result1}
}

func (fake *FakeServiceClient) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.cellByIdMutex.RLock()
	defer fake.cellByIdMutex.RUnlock()
	fake.cellsMutex.RLock()
	defer fake.cellsMutex.RUnlock()
	fake.cellEventsMutex.RLock()
	defer fake.cellEventsMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeServiceClient) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ serviceclient.ServiceClient = new(FakeServiceClient)
