// Code generated by protoc-gen-gogo.
// source: desired_lrp_requests.proto
// DO NOT EDIT!

package models

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import strings "strings"
import reflect "reflect"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type DesiredLRPLifecycleResponse struct {
	Error *Error `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
}

func (m *DesiredLRPLifecycleResponse) Reset()      { *m = DesiredLRPLifecycleResponse{} }
func (*DesiredLRPLifecycleResponse) ProtoMessage() {}
func (*DesiredLRPLifecycleResponse) Descriptor() ([]byte, []int) {
	return fileDescriptorDesiredLrpRequests, []int{0}
}

func (m *DesiredLRPLifecycleResponse) GetError() *Error {
	if m != nil {
		return m.Error
	}
	return nil
}

type DesiredLRPsResponse struct {
	Error       *Error        `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
	DesiredLrps []*DesiredLRP `protobuf:"bytes,2,rep,name=desired_lrps,json=desiredLrps" json:"desired_lrps,omitempty"`
}

func (m *DesiredLRPsResponse) Reset()      { *m = DesiredLRPsResponse{} }
func (*DesiredLRPsResponse) ProtoMessage() {}
func (*DesiredLRPsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptorDesiredLrpRequests, []int{1}
}

func (m *DesiredLRPsResponse) GetError() *Error {
	if m != nil {
		return m.Error
	}
	return nil
}

func (m *DesiredLRPsResponse) GetDesiredLrps() []*DesiredLRP {
	if m != nil {
		return m.DesiredLrps
	}
	return nil
}

type DesiredLRPsRequest struct {
	Domain       string   `protobuf:"bytes,1,opt,name=domain" json:"domain"`
	ProcessGuids []string `protobuf:"bytes,2,rep,name=process_guids,json=processGuids" json:"process_guids,omitempty"`
}

func (m *DesiredLRPsRequest) Reset()      { *m = DesiredLRPsRequest{} }
func (*DesiredLRPsRequest) ProtoMessage() {}
func (*DesiredLRPsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorDesiredLrpRequests, []int{2}
}

func (m *DesiredLRPsRequest) GetDomain() string {
	if m != nil {
		return m.Domain
	}
	return ""
}

func (m *DesiredLRPsRequest) GetProcessGuids() []string {
	if m != nil {
		return m.ProcessGuids
	}
	return nil
}

type DesiredLRPResponse struct {
	Error      *Error      `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
	DesiredLrp *DesiredLRP `protobuf:"bytes,2,opt,name=desired_lrp,json=desiredLrp" json:"desired_lrp,omitempty"`
}

func (m *DesiredLRPResponse) Reset()      { *m = DesiredLRPResponse{} }
func (*DesiredLRPResponse) ProtoMessage() {}
func (*DesiredLRPResponse) Descriptor() ([]byte, []int) {
	return fileDescriptorDesiredLrpRequests, []int{3}
}

func (m *DesiredLRPResponse) GetError() *Error {
	if m != nil {
		return m.Error
	}
	return nil
}

func (m *DesiredLRPResponse) GetDesiredLrp() *DesiredLRP {
	if m != nil {
		return m.DesiredLrp
	}
	return nil
}

type DesiredLRPSchedulingInfosResponse struct {
	Error                     *Error                      `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
	DesiredLrpSchedulingInfos []*DesiredLRPSchedulingInfo `protobuf:"bytes,2,rep,name=desired_lrp_scheduling_infos,json=desiredLrpSchedulingInfos" json:"desired_lrp_scheduling_infos,omitempty"`
}

func (m *DesiredLRPSchedulingInfosResponse) Reset()      { *m = DesiredLRPSchedulingInfosResponse{} }
func (*DesiredLRPSchedulingInfosResponse) ProtoMessage() {}
func (*DesiredLRPSchedulingInfosResponse) Descriptor() ([]byte, []int) {
	return fileDescriptorDesiredLrpRequests, []int{4}
}

func (m *DesiredLRPSchedulingInfosResponse) GetError() *Error {
	if m != nil {
		return m.Error
	}
	return nil
}

func (m *DesiredLRPSchedulingInfosResponse) GetDesiredLrpSchedulingInfos() []*DesiredLRPSchedulingInfo {
	if m != nil {
		return m.DesiredLrpSchedulingInfos
	}
	return nil
}

type DesiredLRPByProcessGuidRequest struct {
	ProcessGuid string `protobuf:"bytes,1,opt,name=process_guid,json=processGuid" json:"process_guid"`
}

func (m *DesiredLRPByProcessGuidRequest) Reset()      { *m = DesiredLRPByProcessGuidRequest{} }
func (*DesiredLRPByProcessGuidRequest) ProtoMessage() {}
func (*DesiredLRPByProcessGuidRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorDesiredLrpRequests, []int{5}
}

func (m *DesiredLRPByProcessGuidRequest) GetProcessGuid() string {
	if m != nil {
		return m.ProcessGuid
	}
	return ""
}

type DesireLRPRequest struct {
	DesiredLrp *DesiredLRP `protobuf:"bytes,1,opt,name=desired_lrp,json=desiredLrp" json:"desired_lrp,omitempty"`
}

func (m *DesireLRPRequest) Reset()      { *m = DesireLRPRequest{} }
func (*DesireLRPRequest) ProtoMessage() {}
func (*DesireLRPRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorDesiredLrpRequests, []int{6}
}

func (m *DesireLRPRequest) GetDesiredLrp() *DesiredLRP {
	if m != nil {
		return m.DesiredLrp
	}
	return nil
}

type UpdateDesiredLRPRequest struct {
	ProcessGuid string            `protobuf:"bytes,1,opt,name=process_guid,json=processGuid" json:"process_guid"`
	Update      *DesiredLRPUpdate `protobuf:"bytes,2,opt,name=update" json:"update,omitempty"`
}

func (m *UpdateDesiredLRPRequest) Reset()      { *m = UpdateDesiredLRPRequest{} }
func (*UpdateDesiredLRPRequest) ProtoMessage() {}
func (*UpdateDesiredLRPRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorDesiredLrpRequests, []int{7}
}

func (m *UpdateDesiredLRPRequest) GetProcessGuid() string {
	if m != nil {
		return m.ProcessGuid
	}
	return ""
}

func (m *UpdateDesiredLRPRequest) GetUpdate() *DesiredLRPUpdate {
	if m != nil {
		return m.Update
	}
	return nil
}

type RemoveDesiredLRPRequest struct {
	ProcessGuid string `protobuf:"bytes,1,opt,name=process_guid,json=processGuid" json:"process_guid"`
}

func (m *RemoveDesiredLRPRequest) Reset()      { *m = RemoveDesiredLRPRequest{} }
func (*RemoveDesiredLRPRequest) ProtoMessage() {}
func (*RemoveDesiredLRPRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorDesiredLrpRequests, []int{8}
}

func (m *RemoveDesiredLRPRequest) GetProcessGuid() string {
	if m != nil {
		return m.ProcessGuid
	}
	return ""
}

func init() {
	proto.RegisterType((*DesiredLRPLifecycleResponse)(nil), "models.DesiredLRPLifecycleResponse")
	proto.RegisterType((*DesiredLRPsResponse)(nil), "models.DesiredLRPsResponse")
	proto.RegisterType((*DesiredLRPsRequest)(nil), "models.DesiredLRPsRequest")
	proto.RegisterType((*DesiredLRPResponse)(nil), "models.DesiredLRPResponse")
	proto.RegisterType((*DesiredLRPSchedulingInfosResponse)(nil), "models.DesiredLRPSchedulingInfosResponse")
	proto.RegisterType((*DesiredLRPByProcessGuidRequest)(nil), "models.DesiredLRPByProcessGuidRequest")
	proto.RegisterType((*DesireLRPRequest)(nil), "models.DesireLRPRequest")
	proto.RegisterType((*UpdateDesiredLRPRequest)(nil), "models.UpdateDesiredLRPRequest")
	proto.RegisterType((*RemoveDesiredLRPRequest)(nil), "models.RemoveDesiredLRPRequest")
}
func (this *DesiredLRPLifecycleResponse) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*DesiredLRPLifecycleResponse)
	if !ok {
		that2, ok := that.(DesiredLRPLifecycleResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Error.Equal(that1.Error) {
		return false
	}
	return true
}
func (this *DesiredLRPsResponse) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*DesiredLRPsResponse)
	if !ok {
		that2, ok := that.(DesiredLRPsResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Error.Equal(that1.Error) {
		return false
	}
	if len(this.DesiredLrps) != len(that1.DesiredLrps) {
		return false
	}
	for i := range this.DesiredLrps {
		if !this.DesiredLrps[i].Equal(that1.DesiredLrps[i]) {
			return false
		}
	}
	return true
}
func (this *DesiredLRPsRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*DesiredLRPsRequest)
	if !ok {
		that2, ok := that.(DesiredLRPsRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Domain != that1.Domain {
		return false
	}
	if len(this.ProcessGuids) != len(that1.ProcessGuids) {
		return false
	}
	for i := range this.ProcessGuids {
		if this.ProcessGuids[i] != that1.ProcessGuids[i] {
			return false
		}
	}
	return true
}
func (this *DesiredLRPResponse) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*DesiredLRPResponse)
	if !ok {
		that2, ok := that.(DesiredLRPResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Error.Equal(that1.Error) {
		return false
	}
	if !this.DesiredLrp.Equal(that1.DesiredLrp) {
		return false
	}
	return true
}
func (this *DesiredLRPSchedulingInfosResponse) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*DesiredLRPSchedulingInfosResponse)
	if !ok {
		that2, ok := that.(DesiredLRPSchedulingInfosResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Error.Equal(that1.Error) {
		return false
	}
	if len(this.DesiredLrpSchedulingInfos) != len(that1.DesiredLrpSchedulingInfos) {
		return false
	}
	for i := range this.DesiredLrpSchedulingInfos {
		if !this.DesiredLrpSchedulingInfos[i].Equal(that1.DesiredLrpSchedulingInfos[i]) {
			return false
		}
	}
	return true
}
func (this *DesiredLRPByProcessGuidRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*DesiredLRPByProcessGuidRequest)
	if !ok {
		that2, ok := that.(DesiredLRPByProcessGuidRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.ProcessGuid != that1.ProcessGuid {
		return false
	}
	return true
}
func (this *DesireLRPRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*DesireLRPRequest)
	if !ok {
		that2, ok := that.(DesireLRPRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.DesiredLrp.Equal(that1.DesiredLrp) {
		return false
	}
	return true
}
func (this *UpdateDesiredLRPRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*UpdateDesiredLRPRequest)
	if !ok {
		that2, ok := that.(UpdateDesiredLRPRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.ProcessGuid != that1.ProcessGuid {
		return false
	}
	if !this.Update.Equal(that1.Update) {
		return false
	}
	return true
}
func (this *RemoveDesiredLRPRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*RemoveDesiredLRPRequest)
	if !ok {
		that2, ok := that.(RemoveDesiredLRPRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.ProcessGuid != that1.ProcessGuid {
		return false
	}
	return true
}
func (this *DesiredLRPLifecycleResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&models.DesiredLRPLifecycleResponse{")
	if this.Error != nil {
		s = append(s, "Error: "+fmt.Sprintf("%#v", this.Error)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DesiredLRPsResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&models.DesiredLRPsResponse{")
	if this.Error != nil {
		s = append(s, "Error: "+fmt.Sprintf("%#v", this.Error)+",\n")
	}
	if this.DesiredLrps != nil {
		s = append(s, "DesiredLrps: "+fmt.Sprintf("%#v", this.DesiredLrps)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DesiredLRPsRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&models.DesiredLRPsRequest{")
	s = append(s, "Domain: "+fmt.Sprintf("%#v", this.Domain)+",\n")
	if this.ProcessGuids != nil {
		s = append(s, "ProcessGuids: "+fmt.Sprintf("%#v", this.ProcessGuids)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DesiredLRPResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&models.DesiredLRPResponse{")
	if this.Error != nil {
		s = append(s, "Error: "+fmt.Sprintf("%#v", this.Error)+",\n")
	}
	if this.DesiredLrp != nil {
		s = append(s, "DesiredLrp: "+fmt.Sprintf("%#v", this.DesiredLrp)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DesiredLRPSchedulingInfosResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&models.DesiredLRPSchedulingInfosResponse{")
	if this.Error != nil {
		s = append(s, "Error: "+fmt.Sprintf("%#v", this.Error)+",\n")
	}
	if this.DesiredLrpSchedulingInfos != nil {
		s = append(s, "DesiredLrpSchedulingInfos: "+fmt.Sprintf("%#v", this.DesiredLrpSchedulingInfos)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DesiredLRPByProcessGuidRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&models.DesiredLRPByProcessGuidRequest{")
	s = append(s, "ProcessGuid: "+fmt.Sprintf("%#v", this.ProcessGuid)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DesireLRPRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&models.DesireLRPRequest{")
	if this.DesiredLrp != nil {
		s = append(s, "DesiredLrp: "+fmt.Sprintf("%#v", this.DesiredLrp)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UpdateDesiredLRPRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&models.UpdateDesiredLRPRequest{")
	s = append(s, "ProcessGuid: "+fmt.Sprintf("%#v", this.ProcessGuid)+",\n")
	if this.Update != nil {
		s = append(s, "Update: "+fmt.Sprintf("%#v", this.Update)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RemoveDesiredLRPRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&models.RemoveDesiredLRPRequest{")
	s = append(s, "ProcessGuid: "+fmt.Sprintf("%#v", this.ProcessGuid)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringDesiredLrpRequests(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *DesiredLRPLifecycleResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DesiredLRPLifecycleResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Error != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintDesiredLrpRequests(dAtA, i, uint64(m.Error.Size()))
		n1, err := m.Error.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	return i, nil
}

func (m *DesiredLRPsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DesiredLRPsResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Error != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintDesiredLrpRequests(dAtA, i, uint64(m.Error.Size()))
		n2, err := m.Error.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if len(m.DesiredLrps) > 0 {
		for _, msg := range m.DesiredLrps {
			dAtA[i] = 0x12
			i++
			i = encodeVarintDesiredLrpRequests(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *DesiredLRPsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DesiredLRPsRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintDesiredLrpRequests(dAtA, i, uint64(len(m.Domain)))
	i += copy(dAtA[i:], m.Domain)
	if len(m.ProcessGuids) > 0 {
		for _, s := range m.ProcessGuids {
			dAtA[i] = 0x12
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	return i, nil
}

func (m *DesiredLRPResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DesiredLRPResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Error != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintDesiredLrpRequests(dAtA, i, uint64(m.Error.Size()))
		n3, err := m.Error.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if m.DesiredLrp != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintDesiredLrpRequests(dAtA, i, uint64(m.DesiredLrp.Size()))
		n4, err := m.DesiredLrp.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	return i, nil
}

func (m *DesiredLRPSchedulingInfosResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DesiredLRPSchedulingInfosResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Error != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintDesiredLrpRequests(dAtA, i, uint64(m.Error.Size()))
		n5, err := m.Error.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	if len(m.DesiredLrpSchedulingInfos) > 0 {
		for _, msg := range m.DesiredLrpSchedulingInfos {
			dAtA[i] = 0x12
			i++
			i = encodeVarintDesiredLrpRequests(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *DesiredLRPByProcessGuidRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DesiredLRPByProcessGuidRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintDesiredLrpRequests(dAtA, i, uint64(len(m.ProcessGuid)))
	i += copy(dAtA[i:], m.ProcessGuid)
	return i, nil
}

func (m *DesireLRPRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DesireLRPRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.DesiredLrp != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintDesiredLrpRequests(dAtA, i, uint64(m.DesiredLrp.Size()))
		n6, err := m.DesiredLrp.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	return i, nil
}

func (m *UpdateDesiredLRPRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateDesiredLRPRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintDesiredLrpRequests(dAtA, i, uint64(len(m.ProcessGuid)))
	i += copy(dAtA[i:], m.ProcessGuid)
	if m.Update != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintDesiredLrpRequests(dAtA, i, uint64(m.Update.Size()))
		n7, err := m.Update.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	return i, nil
}

func (m *RemoveDesiredLRPRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RemoveDesiredLRPRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintDesiredLrpRequests(dAtA, i, uint64(len(m.ProcessGuid)))
	i += copy(dAtA[i:], m.ProcessGuid)
	return i, nil
}

func encodeFixed64DesiredLrpRequests(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32DesiredLrpRequests(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintDesiredLrpRequests(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *DesiredLRPLifecycleResponse) Size() (n int) {
	var l int
	_ = l
	if m.Error != nil {
		l = m.Error.Size()
		n += 1 + l + sovDesiredLrpRequests(uint64(l))
	}
	return n
}

func (m *DesiredLRPsResponse) Size() (n int) {
	var l int
	_ = l
	if m.Error != nil {
		l = m.Error.Size()
		n += 1 + l + sovDesiredLrpRequests(uint64(l))
	}
	if len(m.DesiredLrps) > 0 {
		for _, e := range m.DesiredLrps {
			l = e.Size()
			n += 1 + l + sovDesiredLrpRequests(uint64(l))
		}
	}
	return n
}

func (m *DesiredLRPsRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.Domain)
	n += 1 + l + sovDesiredLrpRequests(uint64(l))
	if len(m.ProcessGuids) > 0 {
		for _, s := range m.ProcessGuids {
			l = len(s)
			n += 1 + l + sovDesiredLrpRequests(uint64(l))
		}
	}
	return n
}

func (m *DesiredLRPResponse) Size() (n int) {
	var l int
	_ = l
	if m.Error != nil {
		l = m.Error.Size()
		n += 1 + l + sovDesiredLrpRequests(uint64(l))
	}
	if m.DesiredLrp != nil {
		l = m.DesiredLrp.Size()
		n += 1 + l + sovDesiredLrpRequests(uint64(l))
	}
	return n
}

func (m *DesiredLRPSchedulingInfosResponse) Size() (n int) {
	var l int
	_ = l
	if m.Error != nil {
		l = m.Error.Size()
		n += 1 + l + sovDesiredLrpRequests(uint64(l))
	}
	if len(m.DesiredLrpSchedulingInfos) > 0 {
		for _, e := range m.DesiredLrpSchedulingInfos {
			l = e.Size()
			n += 1 + l + sovDesiredLrpRequests(uint64(l))
		}
	}
	return n
}

func (m *DesiredLRPByProcessGuidRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.ProcessGuid)
	n += 1 + l + sovDesiredLrpRequests(uint64(l))
	return n
}

func (m *DesireLRPRequest) Size() (n int) {
	var l int
	_ = l
	if m.DesiredLrp != nil {
		l = m.DesiredLrp.Size()
		n += 1 + l + sovDesiredLrpRequests(uint64(l))
	}
	return n
}

func (m *UpdateDesiredLRPRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.ProcessGuid)
	n += 1 + l + sovDesiredLrpRequests(uint64(l))
	if m.Update != nil {
		l = m.Update.Size()
		n += 1 + l + sovDesiredLrpRequests(uint64(l))
	}
	return n
}

func (m *RemoveDesiredLRPRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.ProcessGuid)
	n += 1 + l + sovDesiredLrpRequests(uint64(l))
	return n
}

func sovDesiredLrpRequests(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozDesiredLrpRequests(x uint64) (n int) {
	return sovDesiredLrpRequests(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *DesiredLRPLifecycleResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DesiredLRPLifecycleResponse{`,
		`Error:` + strings.Replace(fmt.Sprintf("%v", this.Error), "Error", "Error", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DesiredLRPsResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DesiredLRPsResponse{`,
		`Error:` + strings.Replace(fmt.Sprintf("%v", this.Error), "Error", "Error", 1) + `,`,
		`DesiredLrps:` + strings.Replace(fmt.Sprintf("%v", this.DesiredLrps), "DesiredLRP", "DesiredLRP", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DesiredLRPsRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DesiredLRPsRequest{`,
		`Domain:` + fmt.Sprintf("%v", this.Domain) + `,`,
		`ProcessGuids:` + fmt.Sprintf("%v", this.ProcessGuids) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DesiredLRPResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DesiredLRPResponse{`,
		`Error:` + strings.Replace(fmt.Sprintf("%v", this.Error), "Error", "Error", 1) + `,`,
		`DesiredLrp:` + strings.Replace(fmt.Sprintf("%v", this.DesiredLrp), "DesiredLRP", "DesiredLRP", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DesiredLRPSchedulingInfosResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DesiredLRPSchedulingInfosResponse{`,
		`Error:` + strings.Replace(fmt.Sprintf("%v", this.Error), "Error", "Error", 1) + `,`,
		`DesiredLrpSchedulingInfos:` + strings.Replace(fmt.Sprintf("%v", this.DesiredLrpSchedulingInfos), "DesiredLRPSchedulingInfo", "DesiredLRPSchedulingInfo", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DesiredLRPByProcessGuidRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DesiredLRPByProcessGuidRequest{`,
		`ProcessGuid:` + fmt.Sprintf("%v", this.ProcessGuid) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DesireLRPRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DesireLRPRequest{`,
		`DesiredLrp:` + strings.Replace(fmt.Sprintf("%v", this.DesiredLrp), "DesiredLRP", "DesiredLRP", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateDesiredLRPRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateDesiredLRPRequest{`,
		`ProcessGuid:` + fmt.Sprintf("%v", this.ProcessGuid) + `,`,
		`Update:` + strings.Replace(fmt.Sprintf("%v", this.Update), "DesiredLRPUpdate", "DesiredLRPUpdate", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RemoveDesiredLRPRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RemoveDesiredLRPRequest{`,
		`ProcessGuid:` + fmt.Sprintf("%v", this.ProcessGuid) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringDesiredLrpRequests(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *DesiredLRPLifecycleResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDesiredLrpRequests
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DesiredLRPLifecycleResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DesiredLRPLifecycleResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDesiredLrpRequests
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDesiredLrpRequests
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Error == nil {
				m.Error = &Error{}
			}
			if err := m.Error.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDesiredLrpRequests(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDesiredLrpRequests
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DesiredLRPsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDesiredLrpRequests
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DesiredLRPsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DesiredLRPsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDesiredLrpRequests
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDesiredLrpRequests
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Error == nil {
				m.Error = &Error{}
			}
			if err := m.Error.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DesiredLrps", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDesiredLrpRequests
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDesiredLrpRequests
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DesiredLrps = append(m.DesiredLrps, &DesiredLRP{})
			if err := m.DesiredLrps[len(m.DesiredLrps)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDesiredLrpRequests(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDesiredLrpRequests
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DesiredLRPsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDesiredLrpRequests
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DesiredLRPsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DesiredLRPsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Domain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDesiredLrpRequests
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDesiredLrpRequests
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Domain = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProcessGuids", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDesiredLrpRequests
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDesiredLrpRequests
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProcessGuids = append(m.ProcessGuids, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDesiredLrpRequests(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDesiredLrpRequests
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DesiredLRPResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDesiredLrpRequests
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DesiredLRPResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DesiredLRPResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDesiredLrpRequests
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDesiredLrpRequests
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Error == nil {
				m.Error = &Error{}
			}
			if err := m.Error.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DesiredLrp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDesiredLrpRequests
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDesiredLrpRequests
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DesiredLrp == nil {
				m.DesiredLrp = &DesiredLRP{}
			}
			if err := m.DesiredLrp.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDesiredLrpRequests(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDesiredLrpRequests
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DesiredLRPSchedulingInfosResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDesiredLrpRequests
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DesiredLRPSchedulingInfosResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DesiredLRPSchedulingInfosResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDesiredLrpRequests
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDesiredLrpRequests
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Error == nil {
				m.Error = &Error{}
			}
			if err := m.Error.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DesiredLrpSchedulingInfos", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDesiredLrpRequests
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDesiredLrpRequests
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DesiredLrpSchedulingInfos = append(m.DesiredLrpSchedulingInfos, &DesiredLRPSchedulingInfo{})
			if err := m.DesiredLrpSchedulingInfos[len(m.DesiredLrpSchedulingInfos)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDesiredLrpRequests(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDesiredLrpRequests
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DesiredLRPByProcessGuidRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDesiredLrpRequests
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DesiredLRPByProcessGuidRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DesiredLRPByProcessGuidRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProcessGuid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDesiredLrpRequests
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDesiredLrpRequests
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProcessGuid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDesiredLrpRequests(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDesiredLrpRequests
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DesireLRPRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDesiredLrpRequests
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DesireLRPRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DesireLRPRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DesiredLrp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDesiredLrpRequests
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDesiredLrpRequests
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DesiredLrp == nil {
				m.DesiredLrp = &DesiredLRP{}
			}
			if err := m.DesiredLrp.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDesiredLrpRequests(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDesiredLrpRequests
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateDesiredLRPRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDesiredLrpRequests
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateDesiredLRPRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateDesiredLRPRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProcessGuid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDesiredLrpRequests
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDesiredLrpRequests
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProcessGuid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Update", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDesiredLrpRequests
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDesiredLrpRequests
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Update == nil {
				m.Update = &DesiredLRPUpdate{}
			}
			if err := m.Update.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDesiredLrpRequests(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDesiredLrpRequests
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RemoveDesiredLRPRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDesiredLrpRequests
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RemoveDesiredLRPRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RemoveDesiredLRPRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProcessGuid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDesiredLrpRequests
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDesiredLrpRequests
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProcessGuid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDesiredLrpRequests(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDesiredLrpRequests
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipDesiredLrpRequests(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowDesiredLrpRequests
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDesiredLrpRequests
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDesiredLrpRequests
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthDesiredLrpRequests
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowDesiredLrpRequests
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipDesiredLrpRequests(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthDesiredLrpRequests = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowDesiredLrpRequests   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("desired_lrp_requests.proto", fileDescriptorDesiredLrpRequests) }

var fileDescriptorDesiredLrpRequests = []byte{
	// 445 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x52, 0xc1, 0x6e, 0xd3, 0x40,
	0x10, 0xf5, 0x16, 0x88, 0xd4, 0x71, 0x2a, 0xc1, 0x72, 0xa8, 0x09, 0xd5, 0x12, 0xb6, 0x07, 0x7a,
	0x00, 0x17, 0x15, 0xf1, 0x03, 0x16, 0xa8, 0xaa, 0x94, 0x43, 0xb5, 0x08, 0x71, 0xb4, 0x52, 0x7b,
	0xe3, 0x5a, 0xb2, 0xbd, 0xee, 0xae, 0x8d, 0xd4, 0x1b, 0x9f, 0xc0, 0x67, 0x20, 0xf1, 0x23, 0x3d,
	0xf6, 0xc8, 0x09, 0x11, 0x73, 0xe1, 0x98, 0x4f, 0x40, 0xd9, 0x75, 0xf0, 0x26, 0xe1, 0x80, 0xc5,
	0xcd, 0x3b, 0xf3, 0xe6, 0xbd, 0x37, 0x6f, 0x0c, 0xa3, 0x98, 0xab, 0x54, 0xf2, 0x38, 0xcc, 0x64,
	0x19, 0x4a, 0x7e, 0x55, 0x73, 0x55, 0x29, 0xbf, 0x94, 0xa2, 0x12, 0x78, 0x90, 0x8b, 0x98, 0x67,
	0x6a, 0xf4, 0x22, 0x49, 0xab, 0xcb, 0xfa, 0xc2, 0x8f, 0x44, 0x7e, 0x9c, 0x88, 0x44, 0x1c, 0xeb,
	0xf6, 0x45, 0x3d, 0xd3, 0x2f, 0xfd, 0xd0, 0x5f, 0x66, 0x6c, 0xf4, 0xc0, 0xa2, 0x6c, 0x4b, 0x2e,
	0x97, 0x52, 0x48, 0xf3, 0xa0, 0x01, 0x3c, 0x7e, 0x63, 0x10, 0x13, 0x76, 0x3e, 0x49, 0x67, 0x3c,
	0xba, 0x8e, 0x32, 0xce, 0xb8, 0x2a, 0x45, 0xa1, 0x38, 0x3e, 0x84, 0x7b, 0x1a, 0xed, 0xa1, 0x31,
	0x3a, 0x72, 0x4f, 0xf6, 0x7c, 0xe3, 0xc2, 0x7f, 0xbb, 0x2c, 0x32, 0xd3, 0xa3, 0x57, 0xf0, 0xb0,
	0xe3, 0x50, 0xbd, 0x66, 0xf1, 0x6b, 0x18, 0x5a, 0x0e, 0x95, 0xb7, 0x33, 0xbe, 0x73, 0xe4, 0x9e,
	0xe0, 0x15, 0xb6, 0xe3, 0x65, 0x6e, 0x8b, 0x9b, 0xc8, 0x52, 0xd1, 0x0f, 0x80, 0xd7, 0x24, 0x75,
	0x54, 0xf8, 0x00, 0x06, 0xb1, 0xc8, 0xa7, 0x69, 0xa1, 0x25, 0x77, 0x83, 0xbb, 0x37, 0xdf, 0x9f,
	0x38, 0xac, 0xad, 0xe1, 0x43, 0xd8, 0x2b, 0xa5, 0x88, 0xb8, 0x52, 0x61, 0x52, 0xa7, 0xb1, 0xd1,
	0xda, 0x65, 0xc3, 0xb6, 0x78, 0xba, 0xac, 0xd1, 0xc2, 0x26, 0xee, 0xb7, 0xca, 0x2b, 0x70, 0xad,
	0x55, 0xbc, 0x1d, 0x0d, 0xfd, 0xdb, 0x26, 0xd0, 0x6d, 0x42, 0xbf, 0x22, 0x78, 0xda, 0xb5, 0xde,
	0x45, 0x97, 0x3c, 0xae, 0xb3, 0xb4, 0x48, 0xce, 0x8a, 0x99, 0xe8, 0x19, 0xe5, 0x14, 0x0e, 0xec,
	0xff, 0x47, 0xfd, 0xe1, 0x0a, 0xd3, 0x25, 0x59, 0x1b, 0xed, 0x78, 0xdb, 0xd0, 0xba, 0x2a, 0x7b,
	0xd4, 0xd9, 0xdb, 0xf0, 0x43, 0xcf, 0x80, 0x74, 0x63, 0xc1, 0xf5, 0x79, 0x97, 0xdc, 0xea, 0x04,
	0xcf, 0x60, 0x68, 0x87, 0xbc, 0x76, 0x08, 0xd7, 0x4a, 0x9a, 0x9e, 0xc2, 0x7d, 0x43, 0xa5, 0x73,
	0x36, 0xc3, 0x1b, 0x09, 0xa2, 0x7f, 0x4a, 0xb0, 0x82, 0xfd, 0xf7, 0x65, 0x3c, 0xad, 0xb8, 0x7d,
	0xb7, 0x7e, 0x66, 0xf0, 0x4b, 0x18, 0xd4, 0x9a, 0xa3, 0xbd, 0x9a, 0xb7, 0xad, 0x69, 0x34, 0x58,
	0x8b, 0xa3, 0x01, 0xec, 0x33, 0x9e, 0x8b, 0x8f, 0xff, 0xa1, 0x1a, 0x3c, 0xbf, 0x9d, 0x13, 0xe7,
	0xdb, 0x9c, 0x38, 0x8b, 0x39, 0x41, 0x9f, 0x1a, 0x82, 0xbe, 0x34, 0x04, 0xdd, 0x34, 0x04, 0xdd,
	0x36, 0x04, 0xfd, 0x68, 0x08, 0xfa, 0xd5, 0x10, 0x67, 0xd1, 0x10, 0xf4, 0xf9, 0x27, 0x71, 0x7e,
	0x07, 0x00, 0x00, 0xff, 0xff, 0x41, 0x49, 0x15, 0xcc, 0x1d, 0x04, 0x00, 0x00,
}
