// Code generated by protoc-gen-gogo.
// source: task_requests.proto
// DO NOT EDIT!

package models

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import strings "strings"
import reflect "reflect"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type TaskLifecycleResponse struct {
	Error *Error `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
}

func (m *TaskLifecycleResponse) Reset()      { *m = TaskLifecycleResponse{} }
func (*TaskLifecycleResponse) ProtoMessage() {}
func (*TaskLifecycleResponse) Descriptor() ([]byte, []int) {
	return fileDescriptorTaskRequests, []int{0}
}

func (m *TaskLifecycleResponse) GetError() *Error {
	if m != nil {
		return m.Error
	}
	return nil
}

type DesireTaskRequest struct {
	TaskDefinition *TaskDefinition `protobuf:"bytes,1,opt,name=task_definition,json=taskDefinition" json:"task_definition"`
	TaskGuid       string          `protobuf:"bytes,2,opt,name=task_guid,json=taskGuid" json:"task_guid"`
	Domain         string          `protobuf:"bytes,3,opt,name=domain" json:"domain"`
}

func (m *DesireTaskRequest) Reset()                    { *m = DesireTaskRequest{} }
func (*DesireTaskRequest) ProtoMessage()               {}
func (*DesireTaskRequest) Descriptor() ([]byte, []int) { return fileDescriptorTaskRequests, []int{1} }

func (m *DesireTaskRequest) GetTaskDefinition() *TaskDefinition {
	if m != nil {
		return m.TaskDefinition
	}
	return nil
}

func (m *DesireTaskRequest) GetTaskGuid() string {
	if m != nil {
		return m.TaskGuid
	}
	return ""
}

func (m *DesireTaskRequest) GetDomain() string {
	if m != nil {
		return m.Domain
	}
	return ""
}

type StartTaskRequest struct {
	TaskGuid string `protobuf:"bytes,1,opt,name=task_guid,json=taskGuid" json:"task_guid"`
	CellId   string `protobuf:"bytes,2,opt,name=cell_id,json=cellId" json:"cell_id"`
}

func (m *StartTaskRequest) Reset()                    { *m = StartTaskRequest{} }
func (*StartTaskRequest) ProtoMessage()               {}
func (*StartTaskRequest) Descriptor() ([]byte, []int) { return fileDescriptorTaskRequests, []int{2} }

func (m *StartTaskRequest) GetTaskGuid() string {
	if m != nil {
		return m.TaskGuid
	}
	return ""
}

func (m *StartTaskRequest) GetCellId() string {
	if m != nil {
		return m.CellId
	}
	return ""
}

type StartTaskResponse struct {
	Error       *Error `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
	ShouldStart bool   `protobuf:"varint,2,opt,name=should_start,json=shouldStart" json:"should_start"`
}

func (m *StartTaskResponse) Reset()                    { *m = StartTaskResponse{} }
func (*StartTaskResponse) ProtoMessage()               {}
func (*StartTaskResponse) Descriptor() ([]byte, []int) { return fileDescriptorTaskRequests, []int{3} }

func (m *StartTaskResponse) GetError() *Error {
	if m != nil {
		return m.Error
	}
	return nil
}

func (m *StartTaskResponse) GetShouldStart() bool {
	if m != nil {
		return m.ShouldStart
	}
	return false
}

type FailTaskRequest struct {
	TaskGuid      string `protobuf:"bytes,1,opt,name=task_guid,json=taskGuid" json:"task_guid"`
	FailureReason string `protobuf:"bytes,2,opt,name=failure_reason,json=failureReason" json:"failure_reason"`
}

func (m *FailTaskRequest) Reset()                    { *m = FailTaskRequest{} }
func (*FailTaskRequest) ProtoMessage()               {}
func (*FailTaskRequest) Descriptor() ([]byte, []int) { return fileDescriptorTaskRequests, []int{4} }

func (m *FailTaskRequest) GetTaskGuid() string {
	if m != nil {
		return m.TaskGuid
	}
	return ""
}

func (m *FailTaskRequest) GetFailureReason() string {
	if m != nil {
		return m.FailureReason
	}
	return ""
}

type TaskGuidRequest struct {
	TaskGuid string `protobuf:"bytes,1,opt,name=task_guid,json=taskGuid" json:"task_guid"`
}

func (m *TaskGuidRequest) Reset()                    { *m = TaskGuidRequest{} }
func (*TaskGuidRequest) ProtoMessage()               {}
func (*TaskGuidRequest) Descriptor() ([]byte, []int) { return fileDescriptorTaskRequests, []int{5} }

func (m *TaskGuidRequest) GetTaskGuid() string {
	if m != nil {
		return m.TaskGuid
	}
	return ""
}

type CompleteTaskRequest struct {
	TaskGuid      string `protobuf:"bytes,1,opt,name=task_guid,json=taskGuid" json:"task_guid"`
	CellId        string `protobuf:"bytes,2,opt,name=cell_id,json=cellId" json:"cell_id"`
	Failed        bool   `protobuf:"varint,3,opt,name=failed" json:"failed"`
	FailureReason string `protobuf:"bytes,4,opt,name=failure_reason,json=failureReason" json:"failure_reason"`
	Result        string `protobuf:"bytes,5,opt,name=result" json:"result"`
}

func (m *CompleteTaskRequest) Reset()                    { *m = CompleteTaskRequest{} }
func (*CompleteTaskRequest) ProtoMessage()               {}
func (*CompleteTaskRequest) Descriptor() ([]byte, []int) { return fileDescriptorTaskRequests, []int{6} }

func (m *CompleteTaskRequest) GetTaskGuid() string {
	if m != nil {
		return m.TaskGuid
	}
	return ""
}

func (m *CompleteTaskRequest) GetCellId() string {
	if m != nil {
		return m.CellId
	}
	return ""
}

func (m *CompleteTaskRequest) GetFailed() bool {
	if m != nil {
		return m.Failed
	}
	return false
}

func (m *CompleteTaskRequest) GetFailureReason() string {
	if m != nil {
		return m.FailureReason
	}
	return ""
}

func (m *CompleteTaskRequest) GetResult() string {
	if m != nil {
		return m.Result
	}
	return ""
}

type TaskCallbackResponse struct {
	TaskGuid      string `protobuf:"bytes,1,opt,name=task_guid,json=taskGuid" json:"task_guid"`
	Failed        bool   `protobuf:"varint,2,opt,name=failed" json:"failed"`
	FailureReason string `protobuf:"bytes,3,opt,name=failure_reason,json=failureReason" json:"failure_reason"`
	Result        string `protobuf:"bytes,4,opt,name=result" json:"result"`
	Annotation    string `protobuf:"bytes,5,opt,name=annotation" json:"annotation,omitempty"`
	CreatedAt     int64  `protobuf:"varint,6,opt,name=created_at,json=createdAt" json:"created_at"`
}

func (m *TaskCallbackResponse) Reset()                    { *m = TaskCallbackResponse{} }
func (*TaskCallbackResponse) ProtoMessage()               {}
func (*TaskCallbackResponse) Descriptor() ([]byte, []int) { return fileDescriptorTaskRequests, []int{7} }

func (m *TaskCallbackResponse) GetTaskGuid() string {
	if m != nil {
		return m.TaskGuid
	}
	return ""
}

func (m *TaskCallbackResponse) GetFailed() bool {
	if m != nil {
		return m.Failed
	}
	return false
}

func (m *TaskCallbackResponse) GetFailureReason() string {
	if m != nil {
		return m.FailureReason
	}
	return ""
}

func (m *TaskCallbackResponse) GetResult() string {
	if m != nil {
		return m.Result
	}
	return ""
}

func (m *TaskCallbackResponse) GetAnnotation() string {
	if m != nil {
		return m.Annotation
	}
	return ""
}

func (m *TaskCallbackResponse) GetCreatedAt() int64 {
	if m != nil {
		return m.CreatedAt
	}
	return 0
}

type ConvergeTasksRequest struct {
	KickTaskDuration            int64 `protobuf:"varint,1,opt,name=kick_task_duration,json=kickTaskDuration" json:"kick_task_duration"`
	ExpirePendingTaskDuration   int64 `protobuf:"varint,2,opt,name=expire_pending_task_duration,json=expirePendingTaskDuration" json:"expire_pending_task_duration"`
	ExpireCompletedTaskDuration int64 `protobuf:"varint,3,opt,name=expire_completed_task_duration,json=expireCompletedTaskDuration" json:"expire_completed_task_duration"`
}

func (m *ConvergeTasksRequest) Reset()                    { *m = ConvergeTasksRequest{} }
func (*ConvergeTasksRequest) ProtoMessage()               {}
func (*ConvergeTasksRequest) Descriptor() ([]byte, []int) { return fileDescriptorTaskRequests, []int{8} }

func (m *ConvergeTasksRequest) GetKickTaskDuration() int64 {
	if m != nil {
		return m.KickTaskDuration
	}
	return 0
}

func (m *ConvergeTasksRequest) GetExpirePendingTaskDuration() int64 {
	if m != nil {
		return m.ExpirePendingTaskDuration
	}
	return 0
}

func (m *ConvergeTasksRequest) GetExpireCompletedTaskDuration() int64 {
	if m != nil {
		return m.ExpireCompletedTaskDuration
	}
	return 0
}

type ConvergeTasksResponse struct {
	Error *Error `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
}

func (m *ConvergeTasksResponse) Reset()      { *m = ConvergeTasksResponse{} }
func (*ConvergeTasksResponse) ProtoMessage() {}
func (*ConvergeTasksResponse) Descriptor() ([]byte, []int) {
	return fileDescriptorTaskRequests, []int{9}
}

func (m *ConvergeTasksResponse) GetError() *Error {
	if m != nil {
		return m.Error
	}
	return nil
}

type TasksRequest struct {
	Domain string `protobuf:"bytes,1,opt,name=domain" json:"domain"`
	CellId string `protobuf:"bytes,2,opt,name=cell_id,json=cellId" json:"cell_id"`
}

func (m *TasksRequest) Reset()                    { *m = TasksRequest{} }
func (*TasksRequest) ProtoMessage()               {}
func (*TasksRequest) Descriptor() ([]byte, []int) { return fileDescriptorTaskRequests, []int{10} }

func (m *TasksRequest) GetDomain() string {
	if m != nil {
		return m.Domain
	}
	return ""
}

func (m *TasksRequest) GetCellId() string {
	if m != nil {
		return m.CellId
	}
	return ""
}

type TasksResponse struct {
	Error *Error  `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
	Tasks []*Task `protobuf:"bytes,2,rep,name=tasks" json:"tasks,omitempty"`
}

func (m *TasksResponse) Reset()                    { *m = TasksResponse{} }
func (*TasksResponse) ProtoMessage()               {}
func (*TasksResponse) Descriptor() ([]byte, []int) { return fileDescriptorTaskRequests, []int{11} }

func (m *TasksResponse) GetError() *Error {
	if m != nil {
		return m.Error
	}
	return nil
}

func (m *TasksResponse) GetTasks() []*Task {
	if m != nil {
		return m.Tasks
	}
	return nil
}

type TaskByGuidRequest struct {
	TaskGuid string `protobuf:"bytes,1,opt,name=task_guid,json=taskGuid" json:"task_guid"`
}

func (m *TaskByGuidRequest) Reset()                    { *m = TaskByGuidRequest{} }
func (*TaskByGuidRequest) ProtoMessage()               {}
func (*TaskByGuidRequest) Descriptor() ([]byte, []int) { return fileDescriptorTaskRequests, []int{12} }

func (m *TaskByGuidRequest) GetTaskGuid() string {
	if m != nil {
		return m.TaskGuid
	}
	return ""
}

type TaskResponse struct {
	Error *Error `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
	Task  *Task  `protobuf:"bytes,2,opt,name=task" json:"task,omitempty"`
}

func (m *TaskResponse) Reset()                    { *m = TaskResponse{} }
func (*TaskResponse) ProtoMessage()               {}
func (*TaskResponse) Descriptor() ([]byte, []int) { return fileDescriptorTaskRequests, []int{13} }

func (m *TaskResponse) GetError() *Error {
	if m != nil {
		return m.Error
	}
	return nil
}

func (m *TaskResponse) GetTask() *Task {
	if m != nil {
		return m.Task
	}
	return nil
}

func init() {
	proto.RegisterType((*TaskLifecycleResponse)(nil), "models.TaskLifecycleResponse")
	proto.RegisterType((*DesireTaskRequest)(nil), "models.DesireTaskRequest")
	proto.RegisterType((*StartTaskRequest)(nil), "models.StartTaskRequest")
	proto.RegisterType((*StartTaskResponse)(nil), "models.StartTaskResponse")
	proto.RegisterType((*FailTaskRequest)(nil), "models.FailTaskRequest")
	proto.RegisterType((*TaskGuidRequest)(nil), "models.TaskGuidRequest")
	proto.RegisterType((*CompleteTaskRequest)(nil), "models.CompleteTaskRequest")
	proto.RegisterType((*TaskCallbackResponse)(nil), "models.TaskCallbackResponse")
	proto.RegisterType((*ConvergeTasksRequest)(nil), "models.ConvergeTasksRequest")
	proto.RegisterType((*ConvergeTasksResponse)(nil), "models.ConvergeTasksResponse")
	proto.RegisterType((*TasksRequest)(nil), "models.TasksRequest")
	proto.RegisterType((*TasksResponse)(nil), "models.TasksResponse")
	proto.RegisterType((*TaskByGuidRequest)(nil), "models.TaskByGuidRequest")
	proto.RegisterType((*TaskResponse)(nil), "models.TaskResponse")
}
func (this *TaskLifecycleResponse) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*TaskLifecycleResponse)
	if !ok {
		that2, ok := that.(TaskLifecycleResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Error.Equal(that1.Error) {
		return false
	}
	return true
}
func (this *DesireTaskRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*DesireTaskRequest)
	if !ok {
		that2, ok := that.(DesireTaskRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.TaskDefinition.Equal(that1.TaskDefinition) {
		return false
	}
	if this.TaskGuid != that1.TaskGuid {
		return false
	}
	if this.Domain != that1.Domain {
		return false
	}
	return true
}
func (this *StartTaskRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*StartTaskRequest)
	if !ok {
		that2, ok := that.(StartTaskRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.TaskGuid != that1.TaskGuid {
		return false
	}
	if this.CellId != that1.CellId {
		return false
	}
	return true
}
func (this *StartTaskResponse) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*StartTaskResponse)
	if !ok {
		that2, ok := that.(StartTaskResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Error.Equal(that1.Error) {
		return false
	}
	if this.ShouldStart != that1.ShouldStart {
		return false
	}
	return true
}
func (this *FailTaskRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*FailTaskRequest)
	if !ok {
		that2, ok := that.(FailTaskRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.TaskGuid != that1.TaskGuid {
		return false
	}
	if this.FailureReason != that1.FailureReason {
		return false
	}
	return true
}
func (this *TaskGuidRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*TaskGuidRequest)
	if !ok {
		that2, ok := that.(TaskGuidRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.TaskGuid != that1.TaskGuid {
		return false
	}
	return true
}
func (this *CompleteTaskRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*CompleteTaskRequest)
	if !ok {
		that2, ok := that.(CompleteTaskRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.TaskGuid != that1.TaskGuid {
		return false
	}
	if this.CellId != that1.CellId {
		return false
	}
	if this.Failed != that1.Failed {
		return false
	}
	if this.FailureReason != that1.FailureReason {
		return false
	}
	if this.Result != that1.Result {
		return false
	}
	return true
}
func (this *TaskCallbackResponse) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*TaskCallbackResponse)
	if !ok {
		that2, ok := that.(TaskCallbackResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.TaskGuid != that1.TaskGuid {
		return false
	}
	if this.Failed != that1.Failed {
		return false
	}
	if this.FailureReason != that1.FailureReason {
		return false
	}
	if this.Result != that1.Result {
		return false
	}
	if this.Annotation != that1.Annotation {
		return false
	}
	if this.CreatedAt != that1.CreatedAt {
		return false
	}
	return true
}
func (this *ConvergeTasksRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ConvergeTasksRequest)
	if !ok {
		that2, ok := that.(ConvergeTasksRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.KickTaskDuration != that1.KickTaskDuration {
		return false
	}
	if this.ExpirePendingTaskDuration != that1.ExpirePendingTaskDuration {
		return false
	}
	if this.ExpireCompletedTaskDuration != that1.ExpireCompletedTaskDuration {
		return false
	}
	return true
}
func (this *ConvergeTasksResponse) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ConvergeTasksResponse)
	if !ok {
		that2, ok := that.(ConvergeTasksResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Error.Equal(that1.Error) {
		return false
	}
	return true
}
func (this *TasksRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*TasksRequest)
	if !ok {
		that2, ok := that.(TasksRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Domain != that1.Domain {
		return false
	}
	if this.CellId != that1.CellId {
		return false
	}
	return true
}
func (this *TasksResponse) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*TasksResponse)
	if !ok {
		that2, ok := that.(TasksResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Error.Equal(that1.Error) {
		return false
	}
	if len(this.Tasks) != len(that1.Tasks) {
		return false
	}
	for i := range this.Tasks {
		if !this.Tasks[i].Equal(that1.Tasks[i]) {
			return false
		}
	}
	return true
}
func (this *TaskByGuidRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*TaskByGuidRequest)
	if !ok {
		that2, ok := that.(TaskByGuidRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.TaskGuid != that1.TaskGuid {
		return false
	}
	return true
}
func (this *TaskResponse) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*TaskResponse)
	if !ok {
		that2, ok := that.(TaskResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Error.Equal(that1.Error) {
		return false
	}
	if !this.Task.Equal(that1.Task) {
		return false
	}
	return true
}
func (this *TaskLifecycleResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&models.TaskLifecycleResponse{")
	if this.Error != nil {
		s = append(s, "Error: "+fmt.Sprintf("%#v", this.Error)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DesireTaskRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&models.DesireTaskRequest{")
	if this.TaskDefinition != nil {
		s = append(s, "TaskDefinition: "+fmt.Sprintf("%#v", this.TaskDefinition)+",\n")
	}
	s = append(s, "TaskGuid: "+fmt.Sprintf("%#v", this.TaskGuid)+",\n")
	s = append(s, "Domain: "+fmt.Sprintf("%#v", this.Domain)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *StartTaskRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&models.StartTaskRequest{")
	s = append(s, "TaskGuid: "+fmt.Sprintf("%#v", this.TaskGuid)+",\n")
	s = append(s, "CellId: "+fmt.Sprintf("%#v", this.CellId)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *StartTaskResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&models.StartTaskResponse{")
	if this.Error != nil {
		s = append(s, "Error: "+fmt.Sprintf("%#v", this.Error)+",\n")
	}
	s = append(s, "ShouldStart: "+fmt.Sprintf("%#v", this.ShouldStart)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *FailTaskRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&models.FailTaskRequest{")
	s = append(s, "TaskGuid: "+fmt.Sprintf("%#v", this.TaskGuid)+",\n")
	s = append(s, "FailureReason: "+fmt.Sprintf("%#v", this.FailureReason)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TaskGuidRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&models.TaskGuidRequest{")
	s = append(s, "TaskGuid: "+fmt.Sprintf("%#v", this.TaskGuid)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CompleteTaskRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&models.CompleteTaskRequest{")
	s = append(s, "TaskGuid: "+fmt.Sprintf("%#v", this.TaskGuid)+",\n")
	s = append(s, "CellId: "+fmt.Sprintf("%#v", this.CellId)+",\n")
	s = append(s, "Failed: "+fmt.Sprintf("%#v", this.Failed)+",\n")
	s = append(s, "FailureReason: "+fmt.Sprintf("%#v", this.FailureReason)+",\n")
	s = append(s, "Result: "+fmt.Sprintf("%#v", this.Result)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TaskCallbackResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&models.TaskCallbackResponse{")
	s = append(s, "TaskGuid: "+fmt.Sprintf("%#v", this.TaskGuid)+",\n")
	s = append(s, "Failed: "+fmt.Sprintf("%#v", this.Failed)+",\n")
	s = append(s, "FailureReason: "+fmt.Sprintf("%#v", this.FailureReason)+",\n")
	s = append(s, "Result: "+fmt.Sprintf("%#v", this.Result)+",\n")
	s = append(s, "Annotation: "+fmt.Sprintf("%#v", this.Annotation)+",\n")
	s = append(s, "CreatedAt: "+fmt.Sprintf("%#v", this.CreatedAt)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ConvergeTasksRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&models.ConvergeTasksRequest{")
	s = append(s, "KickTaskDuration: "+fmt.Sprintf("%#v", this.KickTaskDuration)+",\n")
	s = append(s, "ExpirePendingTaskDuration: "+fmt.Sprintf("%#v", this.ExpirePendingTaskDuration)+",\n")
	s = append(s, "ExpireCompletedTaskDuration: "+fmt.Sprintf("%#v", this.ExpireCompletedTaskDuration)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ConvergeTasksResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&models.ConvergeTasksResponse{")
	if this.Error != nil {
		s = append(s, "Error: "+fmt.Sprintf("%#v", this.Error)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TasksRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&models.TasksRequest{")
	s = append(s, "Domain: "+fmt.Sprintf("%#v", this.Domain)+",\n")
	s = append(s, "CellId: "+fmt.Sprintf("%#v", this.CellId)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TasksResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&models.TasksResponse{")
	if this.Error != nil {
		s = append(s, "Error: "+fmt.Sprintf("%#v", this.Error)+",\n")
	}
	if this.Tasks != nil {
		s = append(s, "Tasks: "+fmt.Sprintf("%#v", this.Tasks)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TaskByGuidRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&models.TaskByGuidRequest{")
	s = append(s, "TaskGuid: "+fmt.Sprintf("%#v", this.TaskGuid)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TaskResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&models.TaskResponse{")
	if this.Error != nil {
		s = append(s, "Error: "+fmt.Sprintf("%#v", this.Error)+",\n")
	}
	if this.Task != nil {
		s = append(s, "Task: "+fmt.Sprintf("%#v", this.Task)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringTaskRequests(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *TaskLifecycleResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TaskLifecycleResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Error != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTaskRequests(dAtA, i, uint64(m.Error.Size()))
		n1, err := m.Error.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	return i, nil
}

func (m *DesireTaskRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DesireTaskRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.TaskDefinition != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTaskRequests(dAtA, i, uint64(m.TaskDefinition.Size()))
		n2, err := m.TaskDefinition.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	dAtA[i] = 0x12
	i++
	i = encodeVarintTaskRequests(dAtA, i, uint64(len(m.TaskGuid)))
	i += copy(dAtA[i:], m.TaskGuid)
	dAtA[i] = 0x1a
	i++
	i = encodeVarintTaskRequests(dAtA, i, uint64(len(m.Domain)))
	i += copy(dAtA[i:], m.Domain)
	return i, nil
}

func (m *StartTaskRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StartTaskRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintTaskRequests(dAtA, i, uint64(len(m.TaskGuid)))
	i += copy(dAtA[i:], m.TaskGuid)
	dAtA[i] = 0x12
	i++
	i = encodeVarintTaskRequests(dAtA, i, uint64(len(m.CellId)))
	i += copy(dAtA[i:], m.CellId)
	return i, nil
}

func (m *StartTaskResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StartTaskResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Error != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTaskRequests(dAtA, i, uint64(m.Error.Size()))
		n3, err := m.Error.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	dAtA[i] = 0x10
	i++
	if m.ShouldStart {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i++
	return i, nil
}

func (m *FailTaskRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FailTaskRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintTaskRequests(dAtA, i, uint64(len(m.TaskGuid)))
	i += copy(dAtA[i:], m.TaskGuid)
	dAtA[i] = 0x12
	i++
	i = encodeVarintTaskRequests(dAtA, i, uint64(len(m.FailureReason)))
	i += copy(dAtA[i:], m.FailureReason)
	return i, nil
}

func (m *TaskGuidRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TaskGuidRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintTaskRequests(dAtA, i, uint64(len(m.TaskGuid)))
	i += copy(dAtA[i:], m.TaskGuid)
	return i, nil
}

func (m *CompleteTaskRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CompleteTaskRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintTaskRequests(dAtA, i, uint64(len(m.TaskGuid)))
	i += copy(dAtA[i:], m.TaskGuid)
	dAtA[i] = 0x12
	i++
	i = encodeVarintTaskRequests(dAtA, i, uint64(len(m.CellId)))
	i += copy(dAtA[i:], m.CellId)
	dAtA[i] = 0x18
	i++
	if m.Failed {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i++
	dAtA[i] = 0x22
	i++
	i = encodeVarintTaskRequests(dAtA, i, uint64(len(m.FailureReason)))
	i += copy(dAtA[i:], m.FailureReason)
	dAtA[i] = 0x2a
	i++
	i = encodeVarintTaskRequests(dAtA, i, uint64(len(m.Result)))
	i += copy(dAtA[i:], m.Result)
	return i, nil
}

func (m *TaskCallbackResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TaskCallbackResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintTaskRequests(dAtA, i, uint64(len(m.TaskGuid)))
	i += copy(dAtA[i:], m.TaskGuid)
	dAtA[i] = 0x10
	i++
	if m.Failed {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i++
	dAtA[i] = 0x1a
	i++
	i = encodeVarintTaskRequests(dAtA, i, uint64(len(m.FailureReason)))
	i += copy(dAtA[i:], m.FailureReason)
	dAtA[i] = 0x22
	i++
	i = encodeVarintTaskRequests(dAtA, i, uint64(len(m.Result)))
	i += copy(dAtA[i:], m.Result)
	dAtA[i] = 0x2a
	i++
	i = encodeVarintTaskRequests(dAtA, i, uint64(len(m.Annotation)))
	i += copy(dAtA[i:], m.Annotation)
	dAtA[i] = 0x30
	i++
	i = encodeVarintTaskRequests(dAtA, i, uint64(m.CreatedAt))
	return i, nil
}

func (m *ConvergeTasksRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConvergeTasksRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintTaskRequests(dAtA, i, uint64(m.KickTaskDuration))
	dAtA[i] = 0x10
	i++
	i = encodeVarintTaskRequests(dAtA, i, uint64(m.ExpirePendingTaskDuration))
	dAtA[i] = 0x18
	i++
	i = encodeVarintTaskRequests(dAtA, i, uint64(m.ExpireCompletedTaskDuration))
	return i, nil
}

func (m *ConvergeTasksResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConvergeTasksResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Error != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTaskRequests(dAtA, i, uint64(m.Error.Size()))
		n4, err := m.Error.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	return i, nil
}

func (m *TasksRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TasksRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintTaskRequests(dAtA, i, uint64(len(m.Domain)))
	i += copy(dAtA[i:], m.Domain)
	dAtA[i] = 0x12
	i++
	i = encodeVarintTaskRequests(dAtA, i, uint64(len(m.CellId)))
	i += copy(dAtA[i:], m.CellId)
	return i, nil
}

func (m *TasksResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TasksResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Error != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTaskRequests(dAtA, i, uint64(m.Error.Size()))
		n5, err := m.Error.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	if len(m.Tasks) > 0 {
		for _, msg := range m.Tasks {
			dAtA[i] = 0x12
			i++
			i = encodeVarintTaskRequests(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *TaskByGuidRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TaskByGuidRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintTaskRequests(dAtA, i, uint64(len(m.TaskGuid)))
	i += copy(dAtA[i:], m.TaskGuid)
	return i, nil
}

func (m *TaskResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TaskResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Error != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTaskRequests(dAtA, i, uint64(m.Error.Size()))
		n6, err := m.Error.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	if m.Task != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTaskRequests(dAtA, i, uint64(m.Task.Size()))
		n7, err := m.Task.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	return i, nil
}

func encodeFixed64TaskRequests(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32TaskRequests(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintTaskRequests(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *TaskLifecycleResponse) Size() (n int) {
	var l int
	_ = l
	if m.Error != nil {
		l = m.Error.Size()
		n += 1 + l + sovTaskRequests(uint64(l))
	}
	return n
}

func (m *DesireTaskRequest) Size() (n int) {
	var l int
	_ = l
	if m.TaskDefinition != nil {
		l = m.TaskDefinition.Size()
		n += 1 + l + sovTaskRequests(uint64(l))
	}
	l = len(m.TaskGuid)
	n += 1 + l + sovTaskRequests(uint64(l))
	l = len(m.Domain)
	n += 1 + l + sovTaskRequests(uint64(l))
	return n
}

func (m *StartTaskRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.TaskGuid)
	n += 1 + l + sovTaskRequests(uint64(l))
	l = len(m.CellId)
	n += 1 + l + sovTaskRequests(uint64(l))
	return n
}

func (m *StartTaskResponse) Size() (n int) {
	var l int
	_ = l
	if m.Error != nil {
		l = m.Error.Size()
		n += 1 + l + sovTaskRequests(uint64(l))
	}
	n += 2
	return n
}

func (m *FailTaskRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.TaskGuid)
	n += 1 + l + sovTaskRequests(uint64(l))
	l = len(m.FailureReason)
	n += 1 + l + sovTaskRequests(uint64(l))
	return n
}

func (m *TaskGuidRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.TaskGuid)
	n += 1 + l + sovTaskRequests(uint64(l))
	return n
}

func (m *CompleteTaskRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.TaskGuid)
	n += 1 + l + sovTaskRequests(uint64(l))
	l = len(m.CellId)
	n += 1 + l + sovTaskRequests(uint64(l))
	n += 2
	l = len(m.FailureReason)
	n += 1 + l + sovTaskRequests(uint64(l))
	l = len(m.Result)
	n += 1 + l + sovTaskRequests(uint64(l))
	return n
}

func (m *TaskCallbackResponse) Size() (n int) {
	var l int
	_ = l
	l = len(m.TaskGuid)
	n += 1 + l + sovTaskRequests(uint64(l))
	n += 2
	l = len(m.FailureReason)
	n += 1 + l + sovTaskRequests(uint64(l))
	l = len(m.Result)
	n += 1 + l + sovTaskRequests(uint64(l))
	l = len(m.Annotation)
	n += 1 + l + sovTaskRequests(uint64(l))
	n += 1 + sovTaskRequests(uint64(m.CreatedAt))
	return n
}

func (m *ConvergeTasksRequest) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovTaskRequests(uint64(m.KickTaskDuration))
	n += 1 + sovTaskRequests(uint64(m.ExpirePendingTaskDuration))
	n += 1 + sovTaskRequests(uint64(m.ExpireCompletedTaskDuration))
	return n
}

func (m *ConvergeTasksResponse) Size() (n int) {
	var l int
	_ = l
	if m.Error != nil {
		l = m.Error.Size()
		n += 1 + l + sovTaskRequests(uint64(l))
	}
	return n
}

func (m *TasksRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.Domain)
	n += 1 + l + sovTaskRequests(uint64(l))
	l = len(m.CellId)
	n += 1 + l + sovTaskRequests(uint64(l))
	return n
}

func (m *TasksResponse) Size() (n int) {
	var l int
	_ = l
	if m.Error != nil {
		l = m.Error.Size()
		n += 1 + l + sovTaskRequests(uint64(l))
	}
	if len(m.Tasks) > 0 {
		for _, e := range m.Tasks {
			l = e.Size()
			n += 1 + l + sovTaskRequests(uint64(l))
		}
	}
	return n
}

func (m *TaskByGuidRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.TaskGuid)
	n += 1 + l + sovTaskRequests(uint64(l))
	return n
}

func (m *TaskResponse) Size() (n int) {
	var l int
	_ = l
	if m.Error != nil {
		l = m.Error.Size()
		n += 1 + l + sovTaskRequests(uint64(l))
	}
	if m.Task != nil {
		l = m.Task.Size()
		n += 1 + l + sovTaskRequests(uint64(l))
	}
	return n
}

func sovTaskRequests(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozTaskRequests(x uint64) (n int) {
	return sovTaskRequests(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *TaskLifecycleResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TaskLifecycleResponse{`,
		`Error:` + strings.Replace(fmt.Sprintf("%v", this.Error), "Error", "Error", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DesireTaskRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DesireTaskRequest{`,
		`TaskDefinition:` + strings.Replace(fmt.Sprintf("%v", this.TaskDefinition), "TaskDefinition", "TaskDefinition", 1) + `,`,
		`TaskGuid:` + fmt.Sprintf("%v", this.TaskGuid) + `,`,
		`Domain:` + fmt.Sprintf("%v", this.Domain) + `,`,
		`}`,
	}, "")
	return s
}
func (this *StartTaskRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&StartTaskRequest{`,
		`TaskGuid:` + fmt.Sprintf("%v", this.TaskGuid) + `,`,
		`CellId:` + fmt.Sprintf("%v", this.CellId) + `,`,
		`}`,
	}, "")
	return s
}
func (this *StartTaskResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&StartTaskResponse{`,
		`Error:` + strings.Replace(fmt.Sprintf("%v", this.Error), "Error", "Error", 1) + `,`,
		`ShouldStart:` + fmt.Sprintf("%v", this.ShouldStart) + `,`,
		`}`,
	}, "")
	return s
}
func (this *FailTaskRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&FailTaskRequest{`,
		`TaskGuid:` + fmt.Sprintf("%v", this.TaskGuid) + `,`,
		`FailureReason:` + fmt.Sprintf("%v", this.FailureReason) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TaskGuidRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TaskGuidRequest{`,
		`TaskGuid:` + fmt.Sprintf("%v", this.TaskGuid) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CompleteTaskRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CompleteTaskRequest{`,
		`TaskGuid:` + fmt.Sprintf("%v", this.TaskGuid) + `,`,
		`CellId:` + fmt.Sprintf("%v", this.CellId) + `,`,
		`Failed:` + fmt.Sprintf("%v", this.Failed) + `,`,
		`FailureReason:` + fmt.Sprintf("%v", this.FailureReason) + `,`,
		`Result:` + fmt.Sprintf("%v", this.Result) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TaskCallbackResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TaskCallbackResponse{`,
		`TaskGuid:` + fmt.Sprintf("%v", this.TaskGuid) + `,`,
		`Failed:` + fmt.Sprintf("%v", this.Failed) + `,`,
		`FailureReason:` + fmt.Sprintf("%v", this.FailureReason) + `,`,
		`Result:` + fmt.Sprintf("%v", this.Result) + `,`,
		`Annotation:` + fmt.Sprintf("%v", this.Annotation) + `,`,
		`CreatedAt:` + fmt.Sprintf("%v", this.CreatedAt) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ConvergeTasksRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ConvergeTasksRequest{`,
		`KickTaskDuration:` + fmt.Sprintf("%v", this.KickTaskDuration) + `,`,
		`ExpirePendingTaskDuration:` + fmt.Sprintf("%v", this.ExpirePendingTaskDuration) + `,`,
		`ExpireCompletedTaskDuration:` + fmt.Sprintf("%v", this.ExpireCompletedTaskDuration) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ConvergeTasksResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ConvergeTasksResponse{`,
		`Error:` + strings.Replace(fmt.Sprintf("%v", this.Error), "Error", "Error", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TasksRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TasksRequest{`,
		`Domain:` + fmt.Sprintf("%v", this.Domain) + `,`,
		`CellId:` + fmt.Sprintf("%v", this.CellId) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TasksResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TasksResponse{`,
		`Error:` + strings.Replace(fmt.Sprintf("%v", this.Error), "Error", "Error", 1) + `,`,
		`Tasks:` + strings.Replace(fmt.Sprintf("%v", this.Tasks), "Task", "Task", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TaskByGuidRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TaskByGuidRequest{`,
		`TaskGuid:` + fmt.Sprintf("%v", this.TaskGuid) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TaskResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TaskResponse{`,
		`Error:` + strings.Replace(fmt.Sprintf("%v", this.Error), "Error", "Error", 1) + `,`,
		`Task:` + strings.Replace(fmt.Sprintf("%v", this.Task), "Task", "Task", 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringTaskRequests(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *TaskLifecycleResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTaskRequests
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TaskLifecycleResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TaskLifecycleResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTaskRequests
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTaskRequests
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Error == nil {
				m.Error = &Error{}
			}
			if err := m.Error.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTaskRequests(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTaskRequests
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DesireTaskRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTaskRequests
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DesireTaskRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DesireTaskRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskDefinition", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTaskRequests
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTaskRequests
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TaskDefinition == nil {
				m.TaskDefinition = &TaskDefinition{}
			}
			if err := m.TaskDefinition.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskGuid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTaskRequests
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTaskRequests
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TaskGuid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Domain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTaskRequests
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTaskRequests
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Domain = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTaskRequests(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTaskRequests
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StartTaskRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTaskRequests
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StartTaskRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StartTaskRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskGuid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTaskRequests
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTaskRequests
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TaskGuid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CellId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTaskRequests
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTaskRequests
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CellId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTaskRequests(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTaskRequests
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StartTaskResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTaskRequests
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StartTaskResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StartTaskResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTaskRequests
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTaskRequests
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Error == nil {
				m.Error = &Error{}
			}
			if err := m.Error.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShouldStart", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTaskRequests
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ShouldStart = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipTaskRequests(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTaskRequests
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FailTaskRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTaskRequests
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FailTaskRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FailTaskRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskGuid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTaskRequests
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTaskRequests
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TaskGuid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FailureReason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTaskRequests
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTaskRequests
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FailureReason = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTaskRequests(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTaskRequests
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TaskGuidRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTaskRequests
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TaskGuidRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TaskGuidRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskGuid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTaskRequests
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTaskRequests
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TaskGuid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTaskRequests(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTaskRequests
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CompleteTaskRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTaskRequests
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CompleteTaskRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CompleteTaskRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskGuid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTaskRequests
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTaskRequests
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TaskGuid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CellId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTaskRequests
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTaskRequests
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CellId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Failed", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTaskRequests
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Failed = bool(v != 0)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FailureReason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTaskRequests
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTaskRequests
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FailureReason = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTaskRequests
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTaskRequests
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Result = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTaskRequests(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTaskRequests
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TaskCallbackResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTaskRequests
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TaskCallbackResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TaskCallbackResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskGuid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTaskRequests
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTaskRequests
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TaskGuid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Failed", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTaskRequests
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Failed = bool(v != 0)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FailureReason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTaskRequests
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTaskRequests
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FailureReason = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTaskRequests
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTaskRequests
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Result = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Annotation", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTaskRequests
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTaskRequests
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Annotation = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			m.CreatedAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTaskRequests
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreatedAt |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTaskRequests(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTaskRequests
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConvergeTasksRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTaskRequests
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConvergeTasksRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConvergeTasksRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KickTaskDuration", wireType)
			}
			m.KickTaskDuration = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTaskRequests
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.KickTaskDuration |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpirePendingTaskDuration", wireType)
			}
			m.ExpirePendingTaskDuration = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTaskRequests
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExpirePendingTaskDuration |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpireCompletedTaskDuration", wireType)
			}
			m.ExpireCompletedTaskDuration = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTaskRequests
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExpireCompletedTaskDuration |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTaskRequests(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTaskRequests
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConvergeTasksResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTaskRequests
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConvergeTasksResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConvergeTasksResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTaskRequests
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTaskRequests
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Error == nil {
				m.Error = &Error{}
			}
			if err := m.Error.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTaskRequests(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTaskRequests
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TasksRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTaskRequests
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TasksRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TasksRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Domain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTaskRequests
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTaskRequests
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Domain = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CellId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTaskRequests
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTaskRequests
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CellId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTaskRequests(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTaskRequests
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TasksResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTaskRequests
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TasksResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TasksResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTaskRequests
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTaskRequests
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Error == nil {
				m.Error = &Error{}
			}
			if err := m.Error.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tasks", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTaskRequests
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTaskRequests
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tasks = append(m.Tasks, &Task{})
			if err := m.Tasks[len(m.Tasks)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTaskRequests(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTaskRequests
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TaskByGuidRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTaskRequests
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TaskByGuidRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TaskByGuidRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskGuid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTaskRequests
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTaskRequests
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TaskGuid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTaskRequests(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTaskRequests
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TaskResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTaskRequests
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TaskResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TaskResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTaskRequests
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTaskRequests
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Error == nil {
				m.Error = &Error{}
			}
			if err := m.Error.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Task", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTaskRequests
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTaskRequests
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Task == nil {
				m.Task = &Task{}
			}
			if err := m.Task.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTaskRequests(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTaskRequests
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTaskRequests(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTaskRequests
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTaskRequests
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTaskRequests
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthTaskRequests
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowTaskRequests
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipTaskRequests(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthTaskRequests = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTaskRequests   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("task_requests.proto", fileDescriptorTaskRequests) }

var fileDescriptorTaskRequests = []byte{
	// 682 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x94, 0x4f, 0x6f, 0x13, 0x3d,
	0x10, 0xc6, 0xe3, 0x24, 0xcd, 0xdb, 0x4e, 0xfa, 0x77, 0xdb, 0x17, 0x85, 0x52, 0xb6, 0x61, 0x7b,
	0x20, 0x12, 0x25, 0x95, 0x2a, 0xc4, 0xa9, 0x17, 0xd2, 0x16, 0x54, 0xc1, 0x01, 0x2d, 0x41, 0xe2,
	0xb6, 0x72, 0x77, 0x9d, 0xd4, 0xca, 0x66, 0x1d, 0x6c, 0x2f, 0xa2, 0x37, 0x2e, 0xdc, 0xf9, 0x18,
	0x88, 0x4f, 0xc1, 0xb1, 0xc7, 0x1e, 0x39, 0xa0, 0x8a, 0x2e, 0x17, 0xd4, 0x53, 0x3f, 0x02, 0xb2,
	0xbd, 0x69, 0x36, 0x69, 0x11, 0x89, 0xc4, 0x6d, 0x3d, 0xcf, 0xf8, 0xe7, 0x67, 0xec, 0x9d, 0x81,
	0x65, 0x89, 0x45, 0xc7, 0xe3, 0xe4, 0x6d, 0x4c, 0x84, 0x14, 0xf5, 0x1e, 0x67, 0x92, 0x59, 0xa5,
	0x2e, 0x0b, 0x48, 0x28, 0x56, 0x1f, 0xb6, 0xa9, 0x3c, 0x8a, 0x0f, 0xeb, 0x3e, 0xeb, 0x6e, 0xb5,
	0x59, 0x9b, 0x6d, 0x69, 0xf9, 0x30, 0x6e, 0xe9, 0x95, 0x5e, 0xe8, 0x2f, 0xb3, 0x6d, 0x15, 0x14,
	0x2b, 0xfd, 0x2e, 0x13, 0xce, 0x19, 0x37, 0x0b, 0x67, 0x07, 0xfe, 0x6f, 0x62, 0xd1, 0x79, 0x41,
	0x5b, 0xc4, 0x3f, 0xf6, 0x43, 0xe2, 0x12, 0xd1, 0x63, 0x91, 0x20, 0xd6, 0x06, 0x4c, 0xe9, 0xbc,
	0x0a, 0xaa, 0xa2, 0x5a, 0x79, 0x7b, 0xae, 0x6e, 0x0e, 0xae, 0xef, 0xab, 0xa0, 0x6b, 0x34, 0xe7,
	0x0b, 0x82, 0xa5, 0x3d, 0x22, 0x28, 0x27, 0x0a, 0xe2, 0x1a, 0xab, 0x56, 0x13, 0x16, 0xb4, 0xf5,
	0x80, 0xb4, 0x68, 0x44, 0x25, 0x65, 0x51, 0x0a, 0xb9, 0xd5, 0x87, 0xa8, 0xec, 0xbd, 0x2b, 0xb5,
	0xb1, 0x7c, 0x71, 0xb6, 0x3e, 0xba, 0xc5, 0x9d, 0x97, 0x43, 0x49, 0xd6, 0x3d, 0x98, 0xd1, 0x29,
	0xed, 0x98, 0x06, 0x95, 0x7c, 0x15, 0xd5, 0x66, 0x1a, 0xc5, 0x93, 0xb3, 0xf5, 0x9c, 0x3b, 0xad,
	0xc2, 0xcf, 0x62, 0x1a, 0x58, 0x6b, 0x50, 0x0a, 0x58, 0x17, 0xd3, 0xa8, 0x52, 0xc8, 0xe8, 0x69,
	0xcc, 0x69, 0xc2, 0xe2, 0x2b, 0x89, 0xb9, 0xcc, 0x5a, 0x1d, 0x82, 0xa2, 0x1b, 0xa1, 0x77, 0xe1,
	0x3f, 0x9f, 0x84, 0xa1, 0x37, 0x72, 0x6a, 0x49, 0x05, 0x0f, 0x02, 0x07, 0xc3, 0x52, 0x86, 0x3a,
	0xc1, 0xe5, 0x59, 0xf7, 0x61, 0x56, 0x1c, 0xb1, 0x38, 0x0c, 0x3c, 0xa1, 0x00, 0x9a, 0x3e, 0x9d,
	0xd2, 0xcb, 0x46, 0xd1, 0x64, 0x07, 0xc3, 0xc2, 0x53, 0x4c, 0xc3, 0x09, 0x7d, 0x3f, 0x80, 0xf9,
	0x16, 0xa6, 0x61, 0xcc, 0x89, 0xc7, 0x09, 0x16, 0x2c, 0x1a, 0xb2, 0x3f, 0x97, 0x6a, 0xae, 0x96,
	0x9c, 0x47, 0xb0, 0xd0, 0x4c, 0x37, 0x8e, 0x7f, 0x84, 0xf3, 0x15, 0xc1, 0xf2, 0x2e, 0xeb, 0xf6,
	0x42, 0x22, 0xc9, 0x3f, 0xbd, 0x55, 0xf5, 0x92, 0xca, 0x20, 0x09, 0xf4, 0x4b, 0xf6, 0x6f, 0x25,
	0x8d, 0xdd, 0x50, 0x5a, 0xf1, 0x8f, 0xa5, 0x29, 0x14, 0x27, 0x22, 0x0e, 0x65, 0x65, 0x2a, 0x7b,
	0x90, 0x89, 0x39, 0x1f, 0xf3, 0xb0, 0xa2, 0xac, 0xef, 0xe2, 0x30, 0x3c, 0xc4, 0xfe, 0xe0, 0x09,
	0xc7, 0xa8, 0x61, 0x60, 0x32, 0x3f, 0x96, 0xc9, 0xc2, 0x38, 0x26, 0x8b, 0xd7, 0x4d, 0x5a, 0x3b,
	0x00, 0x38, 0x8a, 0x98, 0xc4, 0xba, 0x97, 0x4c, 0x19, 0x6b, 0x2a, 0xe3, 0xe2, 0x6c, 0x7d, 0x65,
	0xa0, 0x6c, 0xb2, 0x2e, 0x95, 0xa4, 0xdb, 0x93, 0xc7, 0x6e, 0x26, 0xdf, 0xda, 0x00, 0xf0, 0x39,
	0xc1, 0x92, 0x04, 0x1e, 0x96, 0x95, 0x52, 0x15, 0xd5, 0x0a, 0x29, 0x7f, 0x26, 0x8d, 0x3f, 0x91,
	0xce, 0x77, 0x04, 0x2b, 0xbb, 0x2c, 0x7a, 0x47, 0x78, 0x5b, 0x3f, 0xa5, 0xe8, 0xbf, 0xe5, 0x36,
	0x58, 0x1d, 0xea, 0x77, 0x3c, 0xd3, 0x9e, 0x31, 0xc7, 0x57, 0xfd, 0xdc, 0xa7, 0x2c, 0x2a, 0x5d,
	0x77, 0x74, 0xaa, 0x5a, 0xfb, 0xb0, 0x46, 0xde, 0xf7, 0x28, 0x27, 0x5e, 0x8f, 0x44, 0x01, 0x8d,
	0xda, 0x23, 0xbb, 0xf3, 0x99, 0xdd, 0xb7, 0x4d, 0xe6, 0x4b, 0x93, 0x38, 0x84, 0x39, 0x00, 0x3b,
	0xc5, 0xf8, 0xe9, 0x4f, 0x16, 0x8c, 0x80, 0x0a, 0x19, 0xd0, 0x1d, 0x93, 0xdb, 0xff, 0x1f, 0x83,
	0x2c, 0x4a, 0x8d, 0xb9, 0x91, 0xea, 0x26, 0x19, 0x73, 0xcf, 0x61, 0x76, 0xe8, 0x4e, 0x06, 0x73,
	0x06, 0x5d, 0x9f, 0x33, 0x7f, 0x1b, 0x18, 0x6f, 0x60, 0x6e, 0x72, 0x0b, 0x96, 0x03, 0x53, 0xaa,
	0x74, 0x51, 0xc9, 0x57, 0x0b, 0xb5, 0xf2, 0xf6, 0x6c, 0x76, 0x92, 0xba, 0x46, 0x72, 0x1e, 0xc3,
	0x92, 0x5a, 0x36, 0x8e, 0x27, 0x6c, 0xe3, 0xd7, 0xa6, 0xbc, 0xc9, 0x0c, 0x55, 0xa1, 0xa8, 0x00,
	0xba, 0xc4, 0x51, 0x3f, 0x5a, 0x69, 0x6c, 0x9e, 0x9e, 0xdb, 0xb9, 0x6f, 0xe7, 0x76, 0xee, 0xf2,
	0xdc, 0x46, 0x1f, 0x12, 0x1b, 0x7d, 0x4e, 0x6c, 0x74, 0x92, 0xd8, 0xe8, 0x34, 0xb1, 0xd1, 0x8f,
	0xc4, 0x46, 0xbf, 0x12, 0x3b, 0x77, 0x99, 0xd8, 0xe8, 0xd3, 0x4f, 0x3b, 0xf7, 0x3b, 0x00, 0x00,
	0xff, 0xff, 0x3a, 0x36, 0x69, 0x2d, 0xee, 0x06, 0x00, 0x00,
}
